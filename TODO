#Practica 1 SS.OO Miguel González Herranz y Carlos León Arjona PA1



if test "$1" == "[-g]"
then
echo -e '\e[1;35mTrabajo realizado por:\e[0m'
echo -e '\e[1;36mMiguel González Herranz DNI:70835278Q\e[0m'
echo -e '\e[1;36mCarlos León Arjona DNI:45135849M\e[0m'
fi

if test "$1" != "[-g]"
then

#FUNCION CORRESPONDIENTE A LA OPCIÓN DE CONFIGURACIÓN
function config {
#Primero imprimimos la configuracion que ya esta cargada y le preguntamos al jugador si desea jugar con ella
echo -e '\e[1;35mCONFIGURACIÓN \e[0m'
if [ -s config.cfg ]
then
JUGADORES=$(cat config.cfg |awk 'NR == 1' | cut -d "=" -f2)
MONEDASBANCA=$(cat config.cfg|awk 'NR == 2'| cut -d "=" -f2)
MONEDAS=$(cat config.cfg|awk 'NR == 3' | cut -d "=" -f2)
APUESTA=$(cat config.cfg |awk 'NR == 4'| cut -d "=" -f2)
RUTA=$(cat config.cfg |awk 'NR == 5'| cut -d "=" -f2)
echo -e '\e[1;32mConfiguración actual:\e[0m'
echo -e '\e[1;36mJUGADORES= '$JUGADORES' \e[0m'
echo -e '\e[1;36mMONEDASBANCA= '$MONEDASBANCA' \e[0m'
echo -e '\e[1;36mMONEDAS= '$MONEDAS' \e[0m'
echo -e '\e[1;36mAPUESTA= '$APUESTA'  \e[0m'
echo -e '\e[1;36mRUTA= '$RUTA' \e[0m'
echo -e '\e[1;33m¿Quiere cambiar la configuracion (s/n)?\e[0m'

respuesta_config="$f"
flagcambiarconfig=1
#leemos si la respuesta introducida es correcta, en el caso de que no lo sea la pedirá hasta que sea correcta
read respuesta_config
if test "$respuesta_config" == "$S" -o "$respuesta_config" == "$s" -o "$respuesta_config" == "$N" -o "$respuesta_config" == "$n"
then
	flagcambiarconfig=0
fi
while test "$flagcambiarconfig" -eq 1
do
	echo -e '\e[1;31mRespuesta incorrecta, vuelva a introducirla: \e[0m'
	read respuesta_config
	if test "$respuesta_config" == "$S" -o "$respuesta_config" == "$s" -o "$respuesta_config" == "$N" -o "$respuesta_config" == "$n"
	then
	flagcambiarconfig=0
	fi
done
else
	respuesta_config="$S"
fi
if test "$respuesta_config" == S -o "$respuesta_config" == s
then
	#Pedimos el numero de jugadores
	echo -e '\e[1;33mIntroduce el número de jugadores (1-3): \e[0m'
	read jugadores
	while test "$jugadores" -gt 3 -o "$jugadores" -lt 1
	do
		echo -e '\e[1;31mIntroduzca un número de jugadores dentro del intervalo: \e[0m'
		read jugadores
	done
	echo JUGADORES=$jugadores > config.cfg
	#pedimos tambien el numero de monedas de la banca
	echo -e '\e[1;33mIntroduce el número de monedas de la banca (6-40): \e[0m'
	read monedas_banca
	while test "$monedas_banca" -gt 40 -o "$monedas_banca" -lt 6
	do
		echo -e '\e[1;31mIntroduzca un número de monedas dentro del intervalo: \e[0m'
		read monedas_banca
	done
	echo MONEDASBANCA=$monedas_banca >> config.cfg
	#pedimos el numero de monedas del monedero
	echo -e '\e[1;33mIntroduce el número de monedas del monedero (1-10): \e[0m'
	read monedero
	while test "$monedero" -gt 10 -o "$monedero" -lt 1
	do
		echo '\e[1;31mIntroduzca un número de monedas dentro del intervalo: \e[0m'
		read monedero
	done
	echo MONEDAS=$monedero >> config.cfg
	#pedimos la apuesta
	echo -e '\e[1;33mIntroduce la apuesta(1-5): \e[0m'
	read apuesta
	while test "$apuesta" -gt 5 -o "$apuesta" -lt 1
	do
		echo -e '\e[1;31mIntroduzca una apuesta dentro del intervalo: \e[0m'
		read apuesta
	done
	echo APUESTA=$apuesta >> config.cfg
	#por ultimo pedimos la ruta del fichero y conprobamos que existe
	echo -e '\e[1;33mIntroduzca la ruta del fichero: \e[0m'
	read fichero
	if [ -f $fichero ]
	then
		echo Ruta correcta
		echo LOG=$fichero >> config.cfg
	else
		flag_fichero=1
		while test $flag_fichero -eq 1
		do
			echo -e '\e[1;31mEl fichero no existe, vuelva a introducir la ruta: \e[0m'
			read fichero
			if [ -f $fichero ]
			then
				flag_fichero=0
				echo -e '\e[1;32mRuta correcta \e[0m'
				echo LOG=$fichero >> config.cfg
			fi
		done
	fi
	echo -e '\e[1;34mNueva configuración guardada correctamente \e[0m'
else
	echo -e '\e[1;34mConfiguración antigua cargada correctamente \e[0m'
fi
}




#FUNCION CORRESPONDIENTE A LA OPCION JUGAR
function jugar {
if [ -s config.cfg ]
then
echo -e '\e[1;32mJUGAR\e[0m'
echo -e '\e[1;35mEl juego de las siete y media consiste en obtener siete puntos y medio, o acercarse a ello lo más posible sin pasarse. Las cartas valen tantos puntos como indica su valor numérico, excepto las figuras, que vale medio punto.\e[0m'
#leemos los datos del fichero config
JUGADORES=$(cat config.cfg |awk 'NR == 1' | cut -d "=" -f2)
MONEDASBANCA=$(cat config.cfg|awk 'NR == 2'| cut -d "=" -f2)
MONEDAS=$(cat config.cfg|awk 'NR == 3' | cut -d "=" -f2)
APUESTA=$(cat config.cfg |awk 'NR == 4'| cut -d "=" -f2)
RUTA=$(cat config.cfg |awk 'NR == 5'| cut -d "=" -f2)
#imprimimos los datos del fichero config y preguntamos al jugador si desea jugar con ellos
echo -e '\e[1;32mConfiguración actual:\e[0m'
echo -e '\e[1;36mJUGADORES= '$JUGADORES' \e[0m'
echo -e '\e[1;36mMONEDASBANCA= '$MONEDASBANCA' \e[0m'
echo -e '\e[1;36mMONEDAS= '$MONEDAS' \e[0m'
echo -e '\e[1;36mAPUESTA= '$APUESTA'  \e[0m'
echo -e '\e[1;36mRUTA= '$RUTA' \e[0m'

echo -e '\e[1;33mUsted jugara con esta configuración\e[0m'
echo -e '\e[1;33m¿Seguir jugando? (s/n)?\e[0m'

flagcambiarjugar=1
read respuesta_jugar
if test "$respuesta_jugar" == "$S" -o "$respuesta_jugar" == "$s" -o "$respuesta_jugar" == "$N" -o "$respuesta_jugar" == "$n"
then
	flagcambiarjugar=0
fi
#comprobamos que la respuesta introducida es válida
while test "$flagcambiarjugar" -eq 1
do
	echo -e '\e[1;31mRespuesta incorrecta, vuelva a introducirla: \e[0m'
	read respuesta_jugar
	if test "$respuesta_jugar" == "$S" -o "$respuesta_jugar" == "$s" -o "$respuesta_jugar" == "$N" -o "$respuesta_jugar" == "$n"
	then
		flagcambiarjugar=0
	fi
done
#Si la respuesta es si, jugaremos, si es no, volveremos al menu
if test "$respuesta_jugar" == S -o "$respuesta_jugar" == s
then
sota="T"
caballo="Q"
rey="K"
AS="As"
v1=1
cont=0
v8=8
declare -a monedero[3]
declare -a jugadores[3]
declare -a sumacartas[13]
declare -a sumacartasmax[13]
i=1
x=1
monedero[1]="$MONEDAS"
monedero[2]="$MONEDAS"
monedero[3]="$MONEDAS"
monederob="$MONEDASBANCA"
flag_partida=0
flag_bc=0
ronda=1
doblea=$((APUESTA+APUESTA))
ganarondasbanca=0
numsiete=0
numsietebanca=0
ganabanca=0
if test "$MONEDAS" -lt "$doblea"
then
	echo -e '\e[1;31mLa partida no se puede iniciar porque los jugadores tienen menos dinero que el doble de la apuesta, por favor, cambie los parametros en la configuración\e[0m'
else
echo -e '\e[1;32mINICIANDO JUEGO...\e[0m'
tiempoi=$SECONDS
echo -e '\e[1;33mTenemos '${#baraja[@]}' cartas\e[0m'
#El siguiente bucle controlará las rondas del juego, el juego se acabará cuando flag_partida valga 1 que es cuando algun jugador se quede sin monedas
while test "${monedero[1]}" -ge "$doblea" -a "${monedero[2]}" -ge "$doblea" -a "${monedero[3]}" -ge "$doblea" -a "$flag_bc" -eq 0
do
gana_r_banca=0
echo -e '\e[1;32m--------\e[0m'
echo -e '\e[1;32mRONDA '$ronda':\e[0m'
echo -e '\e[1;32m--------\e[0m'
i=1
	while test "$i" -le "$JUGADORES"
	do
		echo -e '\e[1;36mJugador '$i':\e[0m'
		sumacartas[i]=0
		flagsigcarta=0
		k=1
		cont=0
		flag_J=0
		flag_desbordamiento=0
		flag_ymedio=0
		while test "$flagsigcarta" -eq 0 -a "$flag_desbordamiento" -eq 0
		do
			#sacamos la cartas de la baraja mientras que la respuesta sea s
			flag_J=0
			r=($RANDOM%40)
			if test "${baraja[r]}" == "$sota"
			then 
				echo -e '\e[1;35mcarta '$k' = J\e[0m'
				flag_J=1
			fi
			if test "$flag_J" -eq 0
			then
				echo -e '\e[1;35mcarta '$k' = '${baraja[r]}'\e[0m'
			fi
			#almacenamos la carta en la variable valor
			valor="${baraja[r]}"
			#Hacemos las comprobaciones necesarias si la carta es una figura
			if test "$valor" == "$AS"
			then
				valor=1
			fi
			#vamos almacenando el valor en el array sumacartas para hacer posteriormente las comprobaciones de desbordamiento
			sumacartas[i]=$((sumacartas[i] + $valor))
			flag_figura=0
			#Para que salga 7,5, imprimimos ,5 al final del valor si ha salido una de las figuras correspondientes
			if test "$valor" == "$sota" -o "$valor" == "$caballo" -o "$valor" == "$rey" 
			then
				#Utilizamos la variable cont para saber si la carta ha salido un número par o impar de veces, asi sabemos si tenemos que poner el 0,5 al final o 					dejamos el valor entero
				flag_figura=1
				((++cont))
				if test $cont -eq 1
				then
					flag_ymedio=1
					echo -e '\e[1;35mValor acumulado = '${sumacartas[i]}',5\e[0m'
				fi
				if test $cont -eq 2
				then
					flag_ymedio=0
					sumacartas[i]=$((sumacartas[i] + $v1))	
					echo -e '\e[1;35mValor acumulado = '${sumacartas[i]}'\e[0m'
					cont=0	
				fi		
			fi
			#Aqui imprimimos por pantalla los valores de la carta si no ha salido ni sota ni caballo ni rey controlado por el contador si el numero de k,q o j es impar
			if test "$cont" -eq 1 -a "$flag_figura" -eq 0
			then
				echo -e '\e[1;35mValor acumulado = '${sumacartas[i]}',5\e[0m'
			fi
			if test "$flag_figura" -eq 0 -a "$cont" -eq 0 
			then
				echo -e '\e[1;35m Valor acumulado = '${sumacartas[i]}'\e[0m'
			fi
			#En el caso de que el valor acumulado sea mayor que 7,5 enviamos el dinero correspondiente a la banca
			if test "${sumacartas[i]}" -ge  "$v8"
			then
				echo -e '\e[1;31mLimite superado, has perdido la ronda\e[0m'
				echo -e '\e[1;34mDinero enviado a la banca\e[0m'
				monedero[i]=$((monedero[i] - $APUESTA))
				monederob=$((monederob + $APUESTA))
				echo -e '\e[1;34mMonedas restantes jugador '$i' = '${monedero[i]}'\e[0m'
				flag_desbordamiento=1
			fi
			#Pedimos si se desea obtener otra carta siempre y cuando no se pasa de 7,5
			case $flag_desbordamiento in 
			0 )
				echo -e '\e[1;32m¿Quiere otra carta mas?(s/n)\e[0m'
				flagdecisioncarta=1
				read respuesta_carta
				if test "$respuesta_carta" == "$S" -o "$respuesta_carta" == "$s" -o "$respuesta_carta" == "$N" -o "$respuesta_carta" ==  "$n"
				then
					flagdecisioncarta=0
					flagsigcarta=1
				fi
				#Con este bucle comprobamos que se introduce una decision correcta(s/n), si es incorrecta, la pedimos hasta que lo sea
				while test "$flagdecisioncarta" -eq 1
				do
					echo -e '\e[1;31mRespuesta incorrecta, vuelva a introducirla: \e[0m'
					read respuesta_carta
					if test "$respuesta_carta" == "$S" -o "$respuesta_carta" == "$s" -o "$respuesta_carta" == "$N" -o "$respuesta_carta" == "$n"
					then
						flagdecisioncarta=0
						flagsigcarta=1
					fi
				done
				#finalmente si la respuesta es si, continuamos sacando cartas, todo ello controlado por el flagsigcarta
				if test "$respuesta_carta" == "$S" -o "$respuesta_carta" == "$s"
				then
					flagsigcarta=0
				fi
				if test "$flagsigcarta" -eq 0
				then
					((k++))
				fi
			;;
			esac
		done
		#para que la comparacion de cartas sea correcta a la hora de decidir quien ha ganado la partida, multiplicamos los valores acumulados por 10 y los almacenamos en 		el vector sumacartasmax que será el que utilizaremos para comparar los valores acumulados de las cartas, en el caso de que haya salido un numero impar de cartas 		con valor 0,5 lo guardamos de la forma apropiada
		sumacartasmax[i]=$((10 * ${sumacartas[i]}))
		if test "${sumacartas[i]}" -eq 7 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=75
			((++numsiete))
		fi
		if test "${sumacartas[i]}" -eq 6 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=65
		fi
		if test "${sumacartas[i]}" -eq 5 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=55
		fi
		if test "${sumacartas[i]}" -eq 4 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=45
		fi
		if test "${sumacartas[i]}" -eq 3 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=35
		fi
		if test "${sumacartas[i]}" -eq 2 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=25
		fi
		if test "${sumacartas[i]}" -eq 1 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=15
		fi
		if test "${sumacartas[i]}" -eq 0 -a "$flag_ymedio" -eq 1
		then
			sumacartasmax[i]=5
		fi
		#echo para comprobar si se hace de forma correcta
		#echo El valor a comparar del jugador $i será ${sumacartasmax[i]}
		((i++))
	done

	#Gestionamos la banca, el modo de funcionamiento es exactamente igual que el de los jugadores, pero sin hacer un bucle para ir sacando todos
	echo -e '\e[1;36mBanca:\e[0m'
	sumacartasb=0
	flagsigcartab=0
	kb=1
	contb=0
	flag_Jb=0
	flag_desbordamientob=0
	sumacartasmaxb=0
	flag_ymediob=0
	while test "$flagsigcartab" -eq 0 -a "$flag_desbordamientob" -eq 0
	do
		
		flag_Jb=0
		r=($RANDOM%40)
		if test "${baraja[r]}" == "$sota"
		then 
				echo -e '\e[1;35mcarta '$kb' = J\e[0m'
			flag_Jb=1
		fi
		if test "$flag_Jb" -eq 0
		then
			echo -e '\e[1;35mcarta '$kb' = '${baraja[r]}'\e[0m'
		fi
		valorb="${baraja[r]}"
		if test "$valorb" == "$AS"
		then
			valorb=1
		fi
		sumacartasb=$((sumacartasb + $valorb))
		flag_figurab=0
		if test "$valorb" == "$sota" -o "$valorb" == "$caballo" -o "$valorb" == "$rey" 
		then
			flag_figurab=1
			((++contb))
			if test $contb -eq 1
			then
				flag_ymediob=1
				echo  -e '\e[1;35mvalor acumulado = '${sumacartasb}',5\e[0m'
			fi
			if test $contb -eq 2
			then
				flag_ymediob=0
				sumacartasb=$((sumacartasb + $v1))	
				echo  -e '\e[1;35mvalor acumulado = '${sumacartasb}'\e[0m'
				contb=0	
			fi		
		fi
		#Aqui imprimimos por pantalla los valores de la carta si no ha salido ni sota ni caballo ni rey controlado por el contador si el numero de k,q o j es impar
		if test "$contb" -eq 1 -a "$flag_figurab" -eq 0
		then
			echo  -e '\e[1;35mvalor acumulado = '${sumacartasb},5'\e[0m'
		fi
		if test "$flag_figurab" -eq 0 -a "$contb" -eq 0 
		then
			echo  -e '\e[1;35mvalor acumulado = '${sumacartasb} '\e[0m'
		fi
		if test "$sumacartasb" -ge  "$v8"
		then
			gana_r_banca=1
			echo -e '\e[1;31mlimite superado, Has perdido \e[0m'
			#Bucle para enviar el dinero correspondiente a los jugadores
			while test "$x" -le "$JUGADORES"
			do
				if test "${sumacartasmax[x]}" -ge 80
				then
					echo -e '\e[1;34m El jugador '$x' no recibirá monedas ya que se paso de monedas\e[0m'
				fi
				if test "${sumacartasmax[x]}" -lt 80 -a "${sumacartasmax[x]}" -ne 75
				then
					echo -e '\e[1;34m El jugador $x recibirá '$APUESTA' monedas\e[0m'
					monederob=$((monederob-$APUESTA))
					monedero[x]=$((monedero[x]+$APUESTA))
				fi
				if test "${sumacartasmax[x]}" -eq 75
				then
					echo -e '\e[1;34m El jugador '$x' recibirá el doble de '$APUESTA' monedas\e[0m'
					monederob=$((monederob-$APUESTA-$APUESTA))
					monedero[x]=$((monedero[x]+$APUESTA+$APUESTA))
				fi
				((++x))
			done
			echo -e '\e[1;34mDinero enviado al jugador\e[0m'
			flag_desbordamientob=1
		fi
		case $flag_desbordamientob in 
		0 )
		echo -e '\e[1;32m¿Quiere otra carta mas?(s/n)\e[0m'
		flagdecisioncartab=1
		read respuesta_cartab
		if test "$respuesta_cartab" == "$S" -o "$respuesta_cartab" == "$s" -o "$respuesta_cartab" == "$N" -o "$respuesta_cartab" ==  "$n"
		then
			flagdecisioncartab=0
			flagsigcartab=1
		fi
		while test "$flagdecisioncartab" -eq 1
		do
			echo -e '\e[1;31mRespuesta incorrecta, vuelva a introducirla: \e[0m'
		read respuesta_cartab
		if test "$respuesta_cartab" == "$S" -o "$respuesta_cartab" == "$s" -o "$respuesta_cartab" == "$N" -o "$respuesta_cartab" == "$n"
		then
			flagdecisioncartab=0
			flagsigcartab=1
		fi
		done
		if test "$respuesta_cartab" == "$S" -o "$respuesta_cartab" == "$s"
		then
			flagsigcartab=0
		fi
		if test "$flagsigcartab" -eq 0
		then
		((kb++))
		fi
		;;
		esac

	
	done
	#Al igual que los jugadores, almacenamos los valores multiplicados por 10 y en el caso de que sea impar el numero de figuras que valen 0,5 lo guardamos de la mejor manera 	posible
	sumacartasmaxb="$((10*sumacartasb))"
	if test "$sumacartasb" -eq 7 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=75
		((++numsietebanca))
	fi
	if test "$sumacartasb" -eq 6 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=65
	fi
	if test "$sumacartasb" -eq 5 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=55
	fi
	if test "$sumacartasb" -eq 4 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=45
	fi
	if test "$sumacartasb" -eq 3 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=35
	fi
	if test "$sumacartasb" -eq 2 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=25
	fi
	if test "$sumacartasb" -eq 1 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=15
	fi
	if test "$sumacartasb" -eq 0 -a "$flag_ymediob" -eq 1
	then
		sumacartasmaxb=5
	fi
	#echo El valor a comparar de la banca será $sumacartasmaxb
	#Aqui se comprueban los resultados de los jugadores y se realizan las gestiones correspondientes a las apuestas
	recibir=1
	if test "$sumacartasmaxb" -eq 75
	then
		while test "$recibir" -le "$JUGADORES"
		do
			if test "${sumacartas[recibir]}" -ge "$v8"
			then
				monedero[recibir]=$((monedero[recibir]-APUESTA))
				monederob=$((monederob+APUESTA))
				echo -e '\e[1;33mComo el jugador '$recibir' se ha pasado de 7,5 le entrega el doble a la banca ya que esta ha sacado 7,5 \e[0m'
			fi
			((++recibir))
		done
	fi
	r_apt=1
	#Hacemos las transferencias necesarias al acabar la ronda
	while test "$r_apt" -le "$JUGADORES"
	do
		if test "${sumacartasmax[r_apt]}" -gt "$sumacartasmaxb" 
		then
			if test "${sumacartasmax[r_apt]}" -lt 75
			then
				monederob=$((monederob-APUESTA))
				monedero[r_apt]=$((monedero[r_apt]+APUESTA))
				gana_r_banca=1
				echo -e '\e[1;33mEl jugador '$r_apt' ha ganado a la banca \e[0m'
				echo -e '\e[1;33mTransfiriendo el dinero de la apuesta desde la banca... \e[0m'
			fi
			if test "${sumacartasmax[r_apt]}" -eq 75
			then
				monederob=$((monederob-doblea))
				monedero[r_apt]=$((monedero[r_apt]+doblea))
				gana_r_banca=1
				echo  -e '\e[1;33mEl jugador '$r_apt' ha ganado a la banca\e[0m'
				echo -e '\e[1;33mTransfiriendo el doble de dinero de la apuesta desde la banca...\e[0m'
			fi
		fi
		if test "${sumacartasmax[r_apt]}" -lt "$sumacartasmaxb" -o "${sumacartasmax[r_apt]}" -eq "$sumacartasmaxb"
		then
			if test "$sumacartasmaxb" -lt 75
			then
				monedero[r_apt]=$((monedero[r_apt]-APUESTA))
				monederob=$((monederob+APUESTA))
				echo -e '\e[1;33mLa banca ha ganado al jugador '$r_apt'\e[0m'
				echo -e '\e[1;33mTransfiriendo el dinero de la apuesta desde el monedero del jugador '$r_apt'...\e[0m'
			fi
			if test "$sumacartasmaxb" -eq 75
			then
				monedero[r_apt]=$((monedero[r_apt]-doblea))
				monederob=$((monederob+doblea))
				echo -e '\e[1;33mLa banca ha ganado al jugador '$r_apt'\e[0m'
				echo -e '\e[1;33mTransfiriendo el doble de dinero de el monedero del jugador '$r_apt'...\e[0m'
			fi
		fi
		((++r_apt))
	done
	#Sacamos las monedas que les quedan a los jugadores al final de la ronda
	echo -e '\e[1;36m----------------\e[0m'
	echo -e '\e[1;36m MONEDAS ACTUALES:\e[0m'
	contador_coins=1
	while test "$contador_coins" -le "$JUGADORES"
	do
		echo -e '\e[1;35mMonedero Jugador '$contador_coins' = '${monedero[contador_coins]}'\e[0m'
		((contador_coins++))
	done
	echo -e '\e[1;35mMonedero Banca = '$monederob'\e[0m'
	#Comprobamos si a la banca le quedan suficientes monedas
	comprobacion=0
	comprobacion=$((doblea*JUGADORES))
	if test "$monederob" -lt "$comprobacion"
	then
		flag_bc=1
	fi
	#Si ganabanca es 1 significa que hay al menos un jugador que ha sacado un numero de cartas mas alto que la banca
	cero=0
	if test "$gana_r_banca" -eq 0
	then
		echo -e '\e[1;32mLa banca ha ganado la ronda '$ronda'\e[0m'
		((++ganarondasbanca))
	else
		echo -e '\e[1;32mLos jugadores han ganado la ronda '$ronda'\e[0m'
	fi
	((++ronda))	
done
i=1
#Comprobamos quien ha ganado la partida y ponemos los motivos por los que se ha acabado la partida
#Aqui si los jugadores no tienen dinero
pierde_jugadores=0 #flag que controla si han perdido los jugadores
while test "$i" -le "$JUGADORES"
	do
	if test "${monedero[i]}" -lt "$doblea" #queda por arreglar que si pierden los jugadores no imprima que pierde la banca
	then
		pierde_jugadores=1
		echo -e '\e[1;31mEl jugador '$i' se ha quedado sin las monedas suficientes para jugar \e[0m'
	fi
	((i++))
done
if test "$pierde_jugadores" -eq 1
then
	echo  -e '\e[1;32mHa ganado la banca\e[0m'
fi
#Aqui si la banca no tiene dinero
#Solo imprime que se ha quedado sin dinero si no han perdido los jugadores
if test "$flag_bc" -ne 0 -a "$pierde_jugadores" -eq 0
then
	ganabanca=0
	echo -e '\e[1;31mLa banca se ha quedado sin las monedas suficientes para jugar\e[0m'
fi
if test "$ganabanca" -eq 0 -a "$pierde_jugadores" -ne 1
then
	echo -e '\e[1;32mHan ganado los jugadores\e[0m'
fi
if test "$pierde_jugadores" -eq 1 -a "$flag_bc" -eq 0
then
	ganabanca=1
	echo -e '\e[1;32mHa ganado la banca\e[0m'
fi
#En el caso de que hayan perdido tanto los jugadores como la banca, se imprimirá que ambos han perdido
if test "$flag_bc" -ne 0 -a "$pierde_jugadores" -eq 1
then
	ganabanca=0
	echo -e '\e[1;31mTanto la banca como los jugadores se han quedado sin monedas\e[0m'
fi
echo -e '\e[1;31mPartida acabada\e[0m'



#A continuacion volcamos los datos de la partida al fichero
tiempofinal=$SECONDS
tiempototal=$((tiempofinal-tiempoinicial))
fecha=`date +"%d/%m/%Y"`
hora=`date +"%H:%M"`
echo -e '\e[1;35mla fecha es: '$fecha'\e[0m'
echo -e '\e[1;35mla hora es: '$hora'\e[0m'
echo -e '\e[1;35mel tiempo total es '$tiempototal'\e[0m'
echo -e '\e[1;35mLa banca ha ganado '$ganarondasbanca' rondas\e[0m'
if test "$JUGADORES" -eq 0
then
	echo $fecha"|"$hora"|"$JUGADORES"|"$MONEDAS"|"$MONEDASBANCA"|"$APUESTA"|"*"|"$monederob"|"$tiempototal"|"$ronda"|"$ganarondasbanca"|"$ganabanca"|"$numsiete"|"$numsietebanca >> $RUTA
fi
if test "$JUGADORES" -eq 1
then
	echo $fecha"|"$hora"|"$JUGADORES"|"$MONEDAS"|"$MONEDASBANCA"|"$APUESTA"|"${monedero[1]}.monedero1"|"$monederob"|"$tiempototal"|"$ronda"|"$ganarondasbanca"|"$ganabanca"|"$numsiete"|"$numsietebanca >> $RUTA
fi
if test "$JUGADORES" -eq 2
then
	echo $fecha"|"$hora"|"$JUGADORES"|"$MONEDAS"|"$MONEDASBANCA"|"$APUESTA"|"${monedero[1]}.monedero1-${monedero[2]}.monedero2"|"$monederob"|"$tiempototal"|"$ronda"|"$ganarondasbanca"|"$ganabanca"|"$numsiete"|"$numsietebanca >> $RUTA
fi
if test "$JUGADORES" -eq 3
then
	echo $fecha"|"$hora"|"$JUGADORES"|"$MONEDAS"|"$MONEDASBANCA"|"$APUESTA"|"${monedero[1]}.monedero1-${monedero[2]}.monedero2-${monedero[3]}.monedero3"|"$monederob"|"$tiempototal"|"$ronda"|"$ganarondasbanca"|"$ganabanca"|"$numsiete"|"$numsietebanca >> $RUTA
fi
fi
fi #Si el jugador no quiere jugar
else
	echo -e '\e[1;31mEl fichero config.cfg no exite o está vacio, por favor introduzca los datos en la configuración \e[0m'
fi
}






#FUNCION CORRESPONDIENTE A LAS ESTADISTICAS DEL JUEGO
function estad {
if [ -s config.cfg ]
then
echo -e '\e[1;32mESTADISTICAS\e[0m' 
#sacamos la ruta del ficherolog
RUTA=$(cat config.cfg |awk 'NR == 5'| cut -d "=" -f2)
if [ -s $RUTA ]
then
	cont_fichero=1
	mediaapuestas=0
	partidasjugadas=$(cat $RUTA | wc -l)
	echo -e '\e[1;36mSe han jugado '$partidasjugadas' partidas\e[0m'
	#Media de apuestas
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		apuesta_comp=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f6)	
		mediaapuestas=$((mediaapuestas+apuesta_comp))
		((++cont_fichero))
	done
	#No hace falta comprobar que no se divida entre 0 porque eso significaria que no se han jugado partidas, por lo que el fichero estaria vacio
	mediaapuestas=$(echo "scale=2; $mediaapuestas/$partidasjugadas" | bc)
	echo -e '\e[1;36mLa media de apuestas ha sido de: '$mediaapuestas'\e[0m'
	#Media de las rondas
	cont_fichero=1
	mediarondas=0
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		rondasjugadas=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f10)	
		mediarondas=$((mediarondas+rondasjugadas))
		((++cont_fichero))
	done
	mediarondas=$(echo "scale=2; $mediarondas/$partidasjugadas" | bc)
	echo -e '\e[1;36mLa media de rondas ha sido de: '$mediarondas' rondas\e[0m'
	#Media de los tiempos
	cont_fichero=1
	mediatiempos=0
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		tiempos=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f9)	
		mediatiempos=$((mediatiempos+tiempos))
		((++cont_fichero))
	done
	mediatiempos=$(echo "scale=2; $mediatiempos/$partidasjugadas" | bc)
	echo -e '\e[1;36mLa media de tiempos ha sido de: '$mediatiempos' segundos\e[0m'
	#Media de los monederos de los jugadores
	cont_fichero=1
	cont_jugadores=1
	monedero_e=0
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		cont_jugadores=1
		mediamonedero_e=0
		jugadores_partida=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f3)
		while test "$cont_jugadores" -le "$jugadores_partida"
		do
			if test "$cont_jugadores" -eq 1
			then
				monedero_e=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f7 |cut -d "." -f1)
				mediamonedero_e=$((monedero_e+mediamonedero_e))
			else
				monedero_e=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f7 |cut -d "." -f$cont_jugadores |cut -d "-" -f$cont_jugadores) #REVISAR, no se si 				es f2 el ultimo
				mediamonedero_e=$((monedero_e+mediamonedero_e))
			fi
			((++cont_jugadores))
		done
		mediamonedero=$(echo "scale=2; $mediamonedero_e/$jugadores_partida" | bc)
		echo -e '\e[1;36mLa media de los monederos de la partida '$cont_fichero' es: '$mediamonedero'\e[0m'
		((++cont_fichero))
	done
	#Media de las monedas de la banca
	cont_fichero=1
	mediamonedasb=0
	monedas_b=0
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		monedasb=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f8)
		mediamonedasb=$((mediamonedasb+monedasb))
		((++cont_fichero))
		
	done
	mediamonedasb=$(echo "scale=2; $mediamonedasb/$partidasjugadas" | bc)
	echo -e '\e[1;36mLa media de las monedas de la banca es: '$mediamonedasb'\e[0m'
	#Tiempo total invertido
	cont_fichero=1
	tiempototal_e=0
	tiempo_e=0
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		tiempo_e=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f9)
		tiempototal_e=$((tiempototal_e+tiempo_e))
		((++cont_fichero))
	done
	echo -e '\e[1;36mEL tiempo total de las partidas es: '$tiempototal_e' segundos\e[0m'
	#Porcentaje de victorias de los jugadores
	cont_fichero=1
	porcentaje=0
	resultado_e=0
	victorias_j=0
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		resultado_e=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f11)
		if test "$resultado_e" -eq 1
		then
			((++victorias_j))
		fi
		((++cont_fichero))
	done
	porcentaje=$(echo "scale=2; ($victorias_j/$partidasjugadas)*100" | bc)
	echo -e '\e[1;36mEl porcentaje de victorias de los jugadores es de un '$porcentaje'%\e[0m'
else
	echo -e '\e[1;31mError, el fichero está vacio\e[0m'
fi
else
	echo -e '\e[1;31mEl fichero config.cfg no exite o está vacio, por favor introduzca los datos en la configuración \e[0m'
fi
}







#FUNCION CORRESPONDIENTE A LA ELECCION DE CLASIFICACION
function clasif { #Falta por hacer el resto de la clasificacion, seria algo parecido a lo de apuestamax, tambien hay que comprobar si bc funciona en encina, ANIMO :)
if [ -s config.cfg ]
then
echo -e '\e[1;32mCLASIFICACION\e[0m' 
#sacamos la ruta del ficherolog
RUTA=$(cat config.cfg |awk 'NR == 5'| cut -d "=" -f2)
if [ -s $RUTA ]
then
	#Datos de la partida más corta
	cont_fichero=1
	pmin=0
	partida_c=1
	p_comp=0
	partidasjugadas=$(cat $RUTA | wc -l)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		p_comp=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f9)	
		if test "$p_comp" -le "$pmin"
		then	
			partida_c=$cont_fichero
			pmin=$p_comp
		fi
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida mas corta son:\e[0m'
	datos=$(cat $RUTA |awk 'NR == '$partida_c'')
	echo $datos
	#Datos de la partida más larga
	cont_fichero=1
	pmax=0
	partida_c=1
	p_comp=0
	partidasjugadas=$(cat $RUTA | wc -l)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		p_comp=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f9)	
		if test "$p_comp" -ge "$pmax"
		then	
			partida_c=$cont_fichero
			pmax=$p_comp
		fi
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida mas larga son:\e[0m'
	datos=$(cat $RUTA |awk 'NR == '$partida_c'')
	echo $datos
	
	#Datos de la partida con más rondas
	cont_fichero=1
	rondasmax=0
	partida_rondasmax=1
	rondas_comp=0
	partidasjugadas=$(cat $RUTA | wc -l)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		rondas_comp=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f10)	
		if test "$rondas_comp" -ge "$rondasmax"
		then	
			partida_rondasmax=$cont_fichero
			rondasmax=$rondas_comp
		fi
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida con el mayor numero de rondas son:\e[0m'
	datos=$(cat $RUTA |awk 'NR == '$partida_rondasmax'')
	echo $datos
	#Datos de la partida con menos rondas
	cont_fichero=1
	rondasmin=0
	partida_rondasmin=1
	rondas_comp=0
	partidasjugadas=$(cat $RUTA | wc -l)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		rondas_comp=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f10)	
		if test "$rondas_comp" -le "$rondasmin"
		then	
			partida_rondasmin=$cont_fichero
			rondasmin=$rondas_comp
		fi
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida con el menor numero de rondas son:\e[0m'
	datos=$(cat $RUTA |awk 'NR == '$partida_rondasmin'')
	echo $datos
	#Sacamos los datos de la partida con la apuesta maxima
	cont_fichero=1
	apuestamax=0
	partida_apuestamax=1
	partidasjugadas=$(cat $RUTA | wc -l)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		apuesta_comp=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f6)	
		if test "$apuesta_comp" -ge "$apuestamax"
		then	
			partida_apuestamax=$cont_fichero
			apuestamax=$apuesta_comp
		fi
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida con la apuesta máxima son:\e[0m'
	datos=$(cat $RUTA |awk 'NR == '$partida_apuestamax'')
	echo $datos
	#Datos de la partida en la que la banca finalizó con más monedas
	cont_fichero=1
	maxmonedasb=0
	partida_maxb=1
	partidasjugadas=$(cat $RUTA | wc -l)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		dinero_compb=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f8)	
		if test "$dinero_compb" -ge "$maxmonedasb"
		then	
			partida_maxb=$cont_fichero
			maxmonedasb=$dinero_compb
		fi
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida en la que la banca finalizó con más monedas son:\e[0m'
	datosb=$(cat $RUTA |awk 'NR == '$partida_maxb'')
	echo $datosb
	#Sacamos los datos de la partida en la que uno de los jugadores ha sacado mas monedas
	cont_fichero=1
	monederomax_j=0
	partida_monederomax=1
	cont_j_c=1
	jugadores_partida_c=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f3)
	while test "$cont_fichero" -le "$partidasjugadas"
	do
		while test "$cont_j_c" -le "$jugadores_partida_c"
		do
			monederoj_c=0
			if test "$cont_j_c" -eq 1
			then
				monederoj_c=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f7 |cut -d "." -f1)
				if test "$monederoj_c" -ge "$monederomax_j"
				then
					monederomax_j=$monederoj_c
					partida_monederomax=$cont_fichero
				fi
			else
				monederoj_c=$(cat $RUTA |awk 'NR == '$cont_fichero''|cut -d "|" -f7 |cut -d "." -f$cont_j_c |cut -d "-" -f$cont_j_c)
				if test "$monederoj_c" -ge "$monederomax_j"
				then
					monederomax_j=$monederoj_c
					partida_monederomax=$cont_fichero
				fi
			fi
			((++cont_j_c))
		done
		((++cont_fichero))
	done
	echo -e '\e[1;36mLos datos de la partida en la que uno de los jugadores ha sacado más monedas son:\e[0m'
	datos=$(cat $RUTA |awk 'NR == '$partida_monederomax'')
	echo $datos
	
else
	echo -e '\e[1;31mError, el fichero está vacio\e[0m'
fi
else
	echo -e '\e[1;31mEl fichero config.cfg no exite o está vacio, por favor introduzca los datos en la configuración \e[0m' 
fi
}

function salir {
	flag2=1
	echo -e '\e[1;35mSaliendo del menú...\e[0m' 
}

#FUNCION CORRESPONDIENTE AL MENU DEL JUEGO
function menu {
echo -e '\e[1;34m----------------------\e[0m'
echo -e '\e[1;34mJUEGO DE LAS 7 Y MEDIA\e[0m'
echo -e "\e[1;33mC)CONFIGURACION\e[0m"
echo -e "\e[1;33mJ)JUGAR\e[0m"
echo -e "\e[1;33mE)ESTADISTICAS\e[0m"
echo -e "\e[1;33mF)CLASIFICACION\e[0m"
echo -e "\e[1;33mS)SALIR\e[0m"
echo -e '\e[1;32m"SieteYMedia". Introduzca una opcion >>\e[0m'
read OPCION
if test "$OPCION" == "$C" -o "$OPCION" == "$c" -o "$OPCION" == "$J" -o "$OPCION" == "$j" -o "$OPCION" == "$E" -o "$OPCION" == "$e" -o "$OPCION" == "$F" -o "$OPCION" == "$f" -o "$OPCION" == "$S" -o "$OPCION" == "$s"
then
	flag=0
fi
#en caso de que el valor introducido no coincida, pedimos otro por pantalla hasta que coincida controlando mediante un flag
while test $flag -ne 0
do
	flag=1
	echo -e '\e[1;31m La opcion elegida no es válida, por favor vuelva a intentarlo: \e[0m'
read OPCION

if test "$OPCION" == "$C" -o "$OPCION" == "$c" -o "$OPCION" == "$J" -o "$OPCION" == "$j" -o "$OPCION" == "$E" -o "$OPCION" == "$e" -o "$OPCION" == "$F" -o "$OPCION" == "$f" -o "$OPCION" == "$S" -o "$OPCION" == "$s"
then
	flag=0
fi
done
}


#leemos la opcion introducida por teclado para mas tarde evaluarla en un switch

#definimos las variables necesarias para realizar comprobaciones
flag=1
flag2=0
flag_intro=1
flag_fichero=0
flagcambiarconfig=1
flagcambiarjugar=1

declare -a cartasmano[13]
C="C"
c="c"
J="J"
j="j"
E="E"
e="e"
F="F"
f="f"
S="S"
s="s"
intro=""
n="n"
N="N"
#declaramos las cartas con un array
declare -a baraja=('As' 'As' 'As' 'As' '2' '2' '2' '2' '3' '3' '3' '3' '4' '4' '4' '4' '5' '5' '5' '5' '6' '6' '6' '6' '7' '7' '7' '7' 'T' 'T' 'T' 'T' 'Q' 'Q' 'Q' 'Q' 'K' 'K' 'K' 'K')
menu
#mientras que la variable introducida sea distinta de s, seguiremos mostrando el menu
while test $flag2 -eq 0
do
case $OPCION in 
	C | c)
	#aqui ira la funcion correspondiente
	config
	;;
	J | j)
	#aqui ira la funcion correspondiente
	jugar
	;;
	E | e)
	#aqui ira la funcion correspondiente
	estad
	;;
	F | f)
	#aqui ira la funcion correspondiente
	clasif
	;;
	S | s)
	salir
	;;
esac
#Comprobamos que se introduzca un intro para continuar mediante un bucle controlado por un flag
if test "$flag2" -ne 1
then
echo -e '\e[1;32mpulse Intro para continuar...\e[0m'
read INTRO
if test "$INTRO" == "$intro"
then
	flag_intro=0
else
	flag_intro=1
fi
while test "$flag_intro" -ne 0
do
	echo -e '\e[1;32mpulse Intro para continuar...\e[0m'
	read INTRO
	if test "$INTRO" == "$intro"
	then
 		flag_intro=0
	fi
done



#llamamos al menu
flag=1
menu
fi
done
fi
#Si el fichero de configuracion esta vacio, pedimos los datos desde el principio
